name: "HCP Terraform Deployment Monitor"

on:
  push:
    branches: [dev, staging, main]

env:
  TF_CLOUD_ORGANIZATION: "Matthew-Ntsiful"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

jobs:
  monitor-hcp-deployment:
    name: "Monitor HCP Terraform Deployment"
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine Workspace
        id: workspace
        run: |
          case "${{ github.ref_name }}" in
            "main") WORKSPACE="prod" ;;
            "staging") WORKSPACE="staging" ;;
            "dev") WORKSPACE="dev" ;;
            *) WORKSPACE="dev" ;;
          esac
          echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT
          echo "üéØ Monitoring workspace: $WORKSPACE"

      - name: Wait for HCP Run to Start
        run: |
          echo "‚è≥ Waiting for HCP Terraform to detect the push..."
          sleep 30  # Give HCP time to detect the push

      - name: Get Latest HCP Run
        id: get_run
        run: |
          # Get the latest run for the workspace
          WORKSPACE="${{ steps.workspace.outputs.workspace }}"
          
          echo "üîç Fetching latest run for workspace: $WORKSPACE"
          
          RUN_DATA=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE/runs?page%5Bsize%5D=1")
          
          RUN_ID=$(echo "$RUN_DATA" | jq -r '.data[0].id // empty')
          RUN_STATUS=$(echo "$RUN_DATA" | jq -r '.data[0].attributes.status // empty')
          
          if [ -z "$RUN_ID" ]; then
            echo "‚ùå No runs found for workspace $WORKSPACE"
            exit 1
          fi
          
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "initial_status=$RUN_STATUS" >> $GITHUB_OUTPUT
          echo "üìã Found run: $RUN_ID with status: $RUN_STATUS"

      - name: Monitor HCP Run Progress
        id: monitor
        run: |
          RUN_ID="${{ steps.get_run.outputs.run_id }}"
          WORKSPACE="${{ steps.workspace.outputs.workspace }}"
          
          echo "üîÑ Monitoring HCP Terraform run: $RUN_ID"
          echo "üìä Dashboard: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE/runs/$RUN_ID"
          
          # Monitor run status
          MAX_WAIT=1800  # 30 minutes max
          WAIT_TIME=0
          SLEEP_INTERVAL=30
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            RUN_DATA=$(curl -s \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/runs/$RUN_ID")
            
            STATUS=$(echo "$RUN_DATA" | jq -r '.data.attributes.status')
            MESSAGE=$(echo "$RUN_DATA" | jq -r '.data.attributes["status-timestamps"] // {}' | jq -r 'keys[-1] // "unknown"')
            
            echo "‚è±Ô∏è  $(date): Status = $STATUS"
            
            case "$STATUS" in
              "applied")
                echo "‚úÖ HCP Terraform deployment completed successfully!"
                echo "status=success" >> $GITHUB_OUTPUT
                echo "final_status=$STATUS" >> $GITHUB_OUTPUT
                exit 0
                ;;
              "errored"|"canceled"|"force_canceled")
                echo "‚ùå HCP Terraform deployment failed with status: $STATUS"
                echo "status=failed" >> $GITHUB_OUTPUT
                echo "final_status=$STATUS" >> $GITHUB_OUTPUT
                exit 1
                ;;
              "planning"|"planned"|"confirmed"|"applying")
                echo "üîÑ Deployment in progress..."
                ;;
              "planned_and_finished")
                echo "‚úÖ Plan completed (no changes needed)"
                echo "status=no_changes" >> $GITHUB_OUTPUT
                echo "final_status=$STATUS" >> $GITHUB_OUTPUT
                exit 0
                ;;
              *)
                echo "‚è≥ Waiting... (Status: $STATUS)"
                ;;
            esac
            
            sleep $SLEEP_INTERVAL
            WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
          done
          
          echo "‚è∞ Timeout waiting for HCP Terraform deployment"
          echo "status=timeout" >> $GITHUB_OUTPUT
          exit 1

      - name: Get Deployment Outputs
        if: steps.monitor.outputs.status == 'success'
        id: outputs
        run: |
          RUN_ID="${{ steps.get_run.outputs.run_id }}"
          
          echo "üìã Fetching deployment outputs..."
          
          # Get the apply details
          APPLY_DATA=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/runs/$RUN_ID/apply")
          
          echo "üéØ Deployment completed successfully!"
          echo "üìä View details: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/${{ steps.workspace.outputs.workspace }}/runs/$RUN_ID"

      - name: Send Success Notification
        if: steps.monitor.outputs.status == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "‚úÖ HCP Terraform Deployment Completed",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ steps.workspace.outputs.workspace }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Run ID",
                      "value": "${{ steps.get_run.outputs.run_id }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ steps.monitor.outputs.final_status }}",
                      "short": true
                    },
                    {
                      "title": "Dashboard",
                      "value": "<https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ steps.workspace.outputs.workspace }}|View Deployment>",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Failure Notification
        if: steps.monitor.outputs.status == 'failed'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "‚ùå HCP Terraform Deployment Failed",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ steps.workspace.outputs.workspace }}",
                      "short": true
                    },
                    {
                      "title": "Branch", 
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ steps.monitor.outputs.final_status }}",
                      "short": true
                    },
                    {
                      "title": "Action Required",
                      "value": "Check HCP Terraform logs for details",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
