name: "Terraform CI/CD Pipeline"

on:
  push:
    branches: [dev, staging, main]
  pull_request:
    branches: [staging, main]

env:
  TF_CLOUD_ORGANIZATION: "Matthew-Ntsiful"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

jobs:
  # Quality checks and HCP monitoring - all in one job
  terraform-pipeline:
    name: "Quality Checks & Deployment"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
      actions: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Determine Environment
        id: env
        run: |
          case "${{ github.ref_name }}" in
            "main") ENV="prod" ;;
            "staging") ENV="staging" ;;
            "dev") ENV="dev" ;;
            *) ENV="dev" ;;
          esac
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "üéØ Target environment: $ENV"

      # Quality Checks
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init (Skip Backend)
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          quiet: true
        continue-on-error: true

      - name: Cost Estimation with Infracost
        if: github.event_name == 'push'
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Cost Report
        if: github.event_name == 'push'
        run: |
          infracost breakdown \
            --path=. \
            --format=table \
            --terraform-var-file=workspace-variables/${{ steps.env.outputs.environment }}.tfvars || echo "Cost estimation unavailable"
        continue-on-error: true

      # HCP Terraform Monitoring (only on push)
      - name: Monitor HCP Terraform Deployment
        if: github.event_name == 'push'
        id: hcp_monitor
        run: |
          WORKSPACE="${{ steps.env.outputs.environment }}"
          echo "üîÑ Monitoring HCP Terraform deployment to $WORKSPACE..."
          
          # Wait for HCP to detect the push
          sleep 45
          
          # Get latest run
          RUN_DATA=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE/runs?page%5Bsize%5D=1")
          
          RUN_ID=$(echo "$RUN_DATA" | jq -r '.data[0].id // empty')
          
          if [ -z "$RUN_ID" ]; then
            echo "‚ö†Ô∏è No recent runs found - HCP may still be starting"
            echo "üìä Monitor manually: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE"
            exit 0
          fi
          
          echo "üìã Monitoring run: $RUN_ID"
          echo "üåê Dashboard: https://app.terraform.io/app/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE/runs/$RUN_ID"
          
          # Monitor for up to 15 minutes
          for i in {1..30}; do
            RUN_STATUS=$(curl -s \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/runs/$RUN_ID" | jq -r '.data.attributes.status')
            
            echo "‚è±Ô∏è  Attempt $i/30: Status = $RUN_STATUS"
            
            case "$RUN_STATUS" in
              "applied")
                echo "‚úÖ HCP Terraform deployment completed successfully!"
                echo "status=success" >> $GITHUB_OUTPUT
                echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
                exit 0
                ;;
              "planned_and_finished")
                echo "‚úÖ Plan completed (no changes needed)"
                echo "status=no_changes" >> $GITHUB_OUTPUT
                echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
                exit 0
                ;;
              "errored"|"canceled"|"force_canceled")
                echo "‚ùå HCP Terraform deployment failed: $RUN_STATUS"
                echo "status=failed" >> $GITHUB_OUTPUT
                echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
                exit 0
                ;;
              "planning"|"planned"|"confirmed"|"applying")
                echo "üîÑ Deployment in progress..."
                ;;
            esac
            
            sleep 30
          done
          
          echo "‚è∞ Monitoring timeout - check HCP manually"
          echo "status=timeout" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # Unified Slack Notification
      - name: Send Deployment Notification
        if: always() && github.event_name == 'push'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.hcp_monitor.outputs.status == 'success' && '‚úÖ Deployment Completed' || steps.hcp_monitor.outputs.status == 'failed' && '‚ùå Deployment Failed' || 'üîÑ Deployment Status Update' }}",
              "attachments": [
                {
                  "color": "${{ steps.hcp_monitor.outputs.status == 'success' && 'good' || steps.hcp_monitor.outputs.status == 'failed' && 'danger' || 'warning' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ steps.env.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ steps.hcp_monitor.outputs.status || 'in_progress' }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.event.head_commit.message }}",
                      "short": false
                    },
                    {
                      "title": "Monitor",
                      "value": "<https://app.terraform.io/app/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ steps.env.outputs.environment }}|HCP Terraform Dashboard>",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
